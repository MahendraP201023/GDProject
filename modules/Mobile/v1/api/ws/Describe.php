<?php
/*+**********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * ("License"); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 ************************************************************************************/
include_once 'include/Webservices/DescribeObject.php';

class Mobile_WS_Describe extends Mobile_WS_Controller {
    function process(Mobile_API_Request $request) {
        global $adb; // Corrected: Moved inside the function
        $current_user = $this->getActiveUser();
        $module = $request->get('module');
        $describeInfo = vtws_describe($module, $current_user);

        $fields = $describeInfo['fields'];
        
        $moduleModel = Vtiger_Module_Model::getInstance($module);
        $fieldModels = $moduleModel->getFields();
        $newFields = array(); // Initialize an array to hold filtered fields
        foreach($fields as $index=>$field) {
            $fieldName = $field['name'];
            $fieldModel = $fieldModels[$fieldName];
            if(!$fieldModel) {
                // Skip if field model is not found
                continue;
            }
            // Skip auto-generated fields
            $autoGeneratedFields = ['createdtime', 'modifiedtime', 'modifiedby', 'source', 'starred', 'tags', 'isconvertedfrompotential', 'id','project_no','projecttask_no','projectmilestone_no','quote_no','measurement_no','account_no', 'contact_no','salutationtype','duration_minutes','notime','reminder_time','contact_id','parent_id','recurringtype','cf_1088','cf_1090','duration_hours','meetingnotes_no'];
            if(in_array($fieldName, $autoGeneratedFields)) {
                continue;
            }
             if ($fieldName == 'linktoaccountscontacts') {
                // Change the field type to picklist and keep other attributes the same
                $field['type'] = array(
                    'refersTo' => array('Organizations','Contacts'),
                    'name' => 'reference'
                );
            }
             if($fieldModel->getFieldDataType() == 'date') {
                // Change the date format to dd/mm/yyyy
                 $field['type']['format'] = 'dd/mm/yyyy';
            }
            if($fieldModel->getFieldDataType() == 'owner') {
                $currentUser = Users_Record_Model::getCurrentUserModel();
                $users = $currentUser->getAccessibleUsers();
                $usersWSId = Mobile_WS_Utils::getEntityModuleWSId('Users');
                $formattedUsers = array();
                foreach ($users as $id => $name) {
                    $formattedUsers[] = array('id' => $usersWSId.'x'.$id, 'name' => $name);
                }
                
                $groups = $currentUser->getAccessibleGroups();
                $groupsWSId = Mobile_WS_Utils::getEntityModuleWSId('Groups');
                $formattedGroups = array();
                foreach ($groups as $id => $name) {
                    $formattedGroups[] = array('id' => $groupsWSId.'x'.$id, 'name' => $name);
                }
                
                $field['type']['picklistValues']['users'] = $formattedUsers; 
                $field['type']['picklistValues']['groups'] = $formattedGroups;

                //Special treatment to set default mandatory owner field
                if (!$field['default_value']) {
                    $field['default_value'] = $usersWSId.'x'.$current_user->id;
                }
            }
            if ($fieldName == 'salutationtype') {
                $values = $fieldModel->getPicklistValues();
                $picklistValues = array();
                foreach ($values as $value => $label) {
                    $picklistValues[] = array('value' => $value, 'label' => $label);
                }
                $field = array(
                    'name' => 'salutation',
                    'label' => 'Salutation',
                    'mandatory' => false,
                    'type' => array(
                        'picklistValues' => $picklistValues,
                        'defaultValue' => '', // Set default value as needed
                        'name' => 'picklist'
                    )
                );
            }
            
            if($field['name'] != 'extrawork_no'){
                // Corrected: Moved inside the loop
                $fieldLabelQuery = $adb->pquery("SELECT * FROM vtiger_field WHERE fieldname = ? AND tabid = ?", array($field['name'], getTabid($module)));
                $fieldLabel = $adb->query_result($fieldLabelQuery, 0, 'fieldlabel');
                $block = $adb->query_result($fieldLabelQuery, 0, 'block');
     
                $getmoduleBlock = $adb->pquery("SELECT * FROM vtiger_blocks WHERE blockid = ?", array($block));
                $blocklabel = $adb->query_result($getmoduleBlock, 0, 'blocklabel');
                if($fieldLabel == ''){
                    $newFields[vtranslate($blocklabel, $module)][] = $field;
                } else {
                    $newFields[vtranslate($blocklabel, $module)][] = $field;
                }
            }    
            
        }
        
        $describeInfo['fields'] = $newFields;
        
        $response = new Mobile_API_Response();
        $response->setResult(array('describe' => $describeInfo));
        $response->setApiSucessMessage('Successfully Fetched Data');
        return $response;
    }
}
